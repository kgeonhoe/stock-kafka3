# Airflow 공통 환경변수 정의
x-airflow-common-env: &airflow-common-env
  AIRFLOW__CORE__EXECUTOR: CeleryExecutor
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
  AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
  AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
  AIRFLOW__CORE__FERNET_KEY: ''
  AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
  AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
  AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
  AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
  AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
  AIRFLOW__CORE__DEFAULT_TIMEZONE: 'Asia/Seoul'
  AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE: 'Asia/Seoul'
  PYTHONPATH: /opt/airflow:/opt/airflow/common:/opt/airflow/config

services:
  # PostgreSQL for Airflow metadata (postgres healthcheck 추가)
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  # Kafka with KRaft (Zookeeper 불필요)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,CONTROLLER://0.0.0.0:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 3
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:29092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: true
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Airflow Init
  airflow-init:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile.airflow
    container_name: airflow-init
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: 'admin'
      _AIRFLOW_WWW_USER_FIRSTNAME: 'admin'
      _AIRFLOW_WWW_USER_LASTNAME: 'admin'
      _AIRFLOW_WWW_USER_EMAIL: 'admin@example.com'
      _AIRFLOW_WWW_USER_PASSWORD: 'admin'
    volumes:
      - ../airflow/dags:/opt/airflow/dags
      - ../airflow/plugins:/opt/airflow/plugins
      - ../data:/data
      - ../common:/opt/airflow/common
      - ../config:/opt/airflow/config
    user: "50000:0"  # airflow user ID 사용
    entrypoint: /bin/bash
    command: 
      - -c
      - |
        # Airflow 실행 파일 확인
        echo "=== Airflow 설치 확인 ==="
        which airflow || echo "airflow 명령어를 찾을 수 없습니다"
        ls -la /opt/airflow/
        echo "PATH: $$PATH"
        
        # PATH에 airflow 경로 추가
        export PATH="/home/airflow/.local/bin:$$PATH"
        
        # 다시 확인
        which airflow || echo "여전히 airflow를 찾을 수 없습니다"
        
        # DB 초기화
        airflow db init
        
        # 사용자 생성
        airflow users create \
          --username admin \
          --firstname admin \
          --lastname admin \
          --role Admin \
          --email admin@example.com \
          --password admin

  # Airflow Webserver
  airflow-webserver:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile.airflow
    container_name: airflow-webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      <<: *airflow-common-env
    volumes:
      - ../airflow/dags:/opt/airflow/dags
      - ../airflow/plugins:/opt/airflow/plugins
      - ../data:/data
      - ../common:/opt/airflow/common
      - ../config:/opt/airflow/config
      - airflow_logs:/opt/airflow/logs
    ports:
      - "8081:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Airflow Scheduler
  airflow-scheduler:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile.airflow
    container_name: airflow-scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      <<: *airflow-common-env
    volumes:
      - ../airflow/dags:/opt/airflow/dags
      - ../airflow/plugins:/opt/airflow/plugins
      - ../data:/data
      - ../common:/opt/airflow/common
      - ../config:/opt/airflow/config
      - airflow_logs:/opt/airflow/logs
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Airflow Worker
  airflow-worker:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile.airflow
    container_name: airflow-worker
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      <<: *airflow-common-env
    volumes:
      - ../airflow/dags:/opt/airflow/dags
      - ../airflow/plugins:/opt/airflow/plugins
      - ../data:/data
      - ../common:/opt/airflow/common
      - ../config:/opt/airflow/config
      - airflow_logs:/opt/airflow/logs
    command: celery worker
    mem_limit: 6g  # 메모리 제한 추가
    memswap_limit: 8g  # 스왑 포함 메모리 제한
    restart: unless-stopped

  # Spark Master
  spark-master:
    image: bitnami/spark:3.5
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - "8082:8080"  # Spark Web UI
      - "7077:7077"  # Spark Master Port
    volumes:
      - ../data:/data
      - ../common:/opt/bitnami/spark/work-dir/common
      - ../config:/opt/bitnami/spark/work-dir/config
    restart: unless-stopped

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.5
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=4G
      - SPARK_WORKER_CORES=4
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    volumes:
      - ../data:/data
      - ../common:/opt/bitnami/spark/work-dir/common
      - ../config:/opt/bitnami/spark/work-dir/config
    restart: unless-stopped

  # Kafka Producer (실시간 데이터 수집)
  kafka-producer:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile.kafka
    container_name: kafka-producer
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_BASE_PATH=/data
      - KIS_APP_KEY=${KIS_APP_KEY}
      - KIS_APP_SECRET=${KIS_APP_SECRET}
      - KIS_ACCOUNT_NO=${KIS_ACCOUNT_NO}
      - PYTHONPATH=/app:/app/common:/app/config
    volumes:
      - ../kafka:/app/kafka
      - ../common:/app/common
      - ../config:/app/config
      - ../data:/data
#FIXME test_multi_source_producer 테스트용 프로듀서 향후 multi_source_producer으로변경
    command: >
      sh -c "
        echo 'Kafka 연결 대기 중...'
        sleep 10
        python /app/kafka/multi_source_producer.py
      "
    restart: unless-stopped

  # Kafka Consumer (Spark Streaming)
  kafka-consumer:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile.spark
    container_name: kafka-consumer
    depends_on:
      - spark-master
      - kafka
      - redis
    environment:
      - SPARK_MODE=client
      - SPARK_MASTER_URL=spark://spark-master:7077
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_BASE_PATH=/data
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - PYTHONPATH=/app:/app/common:/app/config
    volumes:
      - ../kafka:/app/kafka
      - ../common:/app/common
      - ../config:/app/config
      - ../data:/data
    command: >
      sh -c "
        echo 'Spark 및 Kafka 연결 대기 중...' &&
        sleep 20 &&
        echo 'Checkpoints 디렉토리 생성...' &&
        mkdir -p /data/checkpoints &&
        echo 'Python 파일 확인...' &&
        ls -la /app/kafka/ &&
        echo 'PySpark Kafka Consumer 시작...' &&
        spark-submit --master spark://spark-master:7077 --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.0 --conf spark.jars.ivy=/tmp/.ivy2 --driver-memory 1g --executor-memory 1g /app/kafka/realtime_redis_consumer.py
      "
    restart: unless-stopped

  # Streamlit Dashboard
  streamlit:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile.streamlit
    container_name: streamlit
    depends_on:
      - redis
      - kafka
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_BASE_PATH=/data
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - PYTHONPATH=/app:/app/common:/app/config
    volumes:
      - ../streamlit:/app
      - ../common:/app/common
      - ../config:/app/config
      - ../data:/data
    ports:
      - "8501:8501"
    command: streamlit run /app/app.py --server.port=8501 --server.address=0.0.0.0
    restart: unless-stopped

volumes:
  kafka_data:
  redis_data:
  postgres_data:
  airflow_logs:
  stock_data:  # DuckDB 데이터 저장용 볼륨

networks:
  default:
    name: stock-pipeline-network
